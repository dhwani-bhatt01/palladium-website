import { JWT } from "google-auth-library";
import { GoogleSpreadsheet } from "google-spreadsheet";

// Config variables
const SPREADSHEET_ID = process.env.NEXT_PUBLIC_SPREADSHEET_ID ?? "";
const SHEET_ID = process.env.NEXT_PUBLIC_SHEET_ID ?? "";
const SERVICE_ACCOUNT_EMAIL =
	process.env.NEXT_PUBLIC_GOOGLE_SERVICE_ACCOUNT_EMAIL ?? "";
const SERVICE_ACCOUNT_PRIVATE_KEY =
	process.env.NEXT_PUBLIC_GOOGLE_PRIVATE_KEY ?? "";

// Initialize auth - see https://theoephraim.github.io/node-google-spreadsheet/#/guides/authentication
const serviceAccountAuth = new JWT({
	// env var values here are copied from service account credentials generated by google
	// see "Authentication" section in docs for more info
	email: SERVICE_ACCOUNT_EMAIL,
	key: SERVICE_ACCOUNT_PRIVATE_KEY,
	scopes: ["https://www.googleapis.com/auth/spreadsheets"],
});

const doc = new GoogleSpreadsheet(SPREADSHEET_ID, serviceAccountAuth);

export const subscribeToPalladium = async (row: {
	email: string;
	timestamp: string;
}) => {
	try {
		// await doc.useServiceAccountAuth({
		// 	client_email: CLIENT_EMAIL,
		// 	private_key: PRIVATE_KEY,
		// });
		// loads document properties and worksheets
		await doc.loadInfo();

		const sheet = doc.sheetsById[SHEET_ID as any];
		const result = await sheet.addRow(row);
	} catch (e) {
		console.error("Error: ", e);
	}
};
